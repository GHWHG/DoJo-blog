{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17222\\\\Documents\\\\Visual Studio 2019\\\\react_tuts\\\\dojo-blog\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const {\n    data: blogs,\n    isPending,\n    error\n  } = useFetch('http://;ocalhost:8000/blogs'); //destruct 3 properties we get back from useFetch\n\n  const [name, setName] = useState('Mario');\n\n  // const handleDelete = (id) => {\n  //     const newBlogs = blogs.filter(blog => blog.id !== id );\n  //     setBlogs(newBlogs);\n  // }\n\n  // useEffect(() => {\n  //     console.log('use effect ran');\n  //     console.log(name);\n  // }, [name]); \n  // this useEffect hook is gonna run,everytime there is a rerender\n  // e.g. data change or page reload\n  // [] is dependency array, empty [] means only run after first initial render\n  // [name] means only run this hook when name variable is changed\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 24\n    }, this), isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 27\n    }, this), blogs && /*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      title: \"All blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setName('Luigi'),\n      children: \"Change name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"CCXQLpQ/1MY4sQ4G3wujRm96xuM=\", false, function () {\n  return [useFetch];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","BlogList","useFetch","Home","data","blogs","isPending","error","name","setName"],"sources":["C:/Users/17222/Documents/Visual Studio 2019/react_tuts/dojo-blog/src/Home.js"],"sourcesContent":["import { useState,useEffect } from \"react\";\r\nimport BlogList from \"./BlogList\";\r\nimport useFetch from \"./useFetch\";\r\n\r\n\r\nconst Home = () => {\r\n    const { data : blogs, isPending,error } =useFetch('http://;ocalhost:8000/blogs');    //destruct 3 properties we get back from useFetch\r\n\r\n    const [name,setName] = useState('Mario');\r\n\r\n    // const handleDelete = (id) => {\r\n    //     const newBlogs = blogs.filter(blog => blog.id !== id );\r\n    //     setBlogs(newBlogs);\r\n    // }\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     console.log('use effect ran');\r\n    //     console.log(name);\r\n    // }, [name]); \r\n    // this useEffect hook is gonna run,everytime there is a rerender\r\n    // e.g. data change or page reload\r\n    // [] is dependency array, empty [] means only run after first initial render\r\n    // [name] means only run this hook when name variable is changed\r\n\r\n\r\n    return ( \r\n        <div className=\"home\">\r\n            {error &&  <div>{ error }</div>}   \r\n            {/* if there is an error, then we display the error */}\r\n            \r\n            {isPending && <div>Loading...</div>}\r\n            {blogs && <BlogList blogs={blogs}  title='All blogs'/>}\r\n            {/* blogs={blogs} is a prop */}\r\n            {/* when accessing it, it is stored in props object, check bloglist.js */}\r\n            {/* <BlogList blogs={blogs.filter((blog) => blog.author == 'mario' )}  title=\"Mario's blogs\" handleDelete={handleDelete}/> */}\r\n            <button onClick={() => setName('Luigi')}>Change name</button>\r\n            <p>{ name }</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;"],"mappings":";;AAAA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAGlC,MAAMC,IAAI,GAAG,MAAM;EAAA;EACf,MAAM;IAAEC,IAAI,EAAGC,KAAK;IAAEC,SAAS;IAACC;EAAM,CAAC,GAAEL,QAAQ,CAAC,6BAA6B,CAAC,CAAC,CAAI;;EAErF,MAAM,CAACM,IAAI,EAACC,OAAO,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;;EAExC;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,oBACI;IAAK,SAAS,EAAC,MAAM;IAAA,WAChBQ,KAAK,iBAAK;MAAA,UAAOA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAQ,EAG9BD,SAAS,iBAAI;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM,EAClCD,KAAK,iBAAI,QAAC,QAAQ;MAAC,KAAK,EAAEA,KAAM;MAAE,KAAK,EAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE,eAItD;MAAQ,OAAO,EAAE,MAAMI,OAAO,CAAC,OAAO,CAAE;MAAA,UAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAS,eAC7D;MAAA,UAAKD;IAAI;MAAA;MAAA;MAAA;IAAA,QAAM;EAAA;IAAA;IAAA;IAAA;EAAA,QACb;AAEd,CAAC;AAAA,GApCKL,IAAI;EAAA,QACmCD,QAAQ;AAAA;AAAA,KAD/CC,IAAI;AAsCV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}