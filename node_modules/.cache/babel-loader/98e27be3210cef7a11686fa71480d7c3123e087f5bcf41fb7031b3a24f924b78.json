{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// first we need to create a function, which contains hook itself, url is the parameter\nconst useFetch = url => {\n  _s();\n  // custom hook must starts its name with use, \n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      fetch('http://localhost:8000/blogs').then(res => {\n        // we get response object\n        if (!res.ok) {\n          throw Error('could not fetch data for that resource');\n        }\n        return res.json(); // use the json method on that object \n      }).then(data => {\n        // this data is just a local variable, not same as useState data\n        console.log(data);\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        setError(err.message);\n        setIsPending(false);\n      });\n    }, 1000);\n  }, [url]); // we place url as dependency, which means, whenever url changes,  useEffect will rerun to get data for that url\n\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"j58Ke0rYWkJ9haQKrcDZeR5c4bY=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","setTimeout","fetch","then","res","ok","Error","json","console","log","catch","err","message"],"sources":["C:/Users/17222/Documents/Visual Studio 2019/react_tuts/dojo-blog/src/useFetch.js"],"sourcesContent":["\r\n\r\nimport { useState,useEffect } from \"react\";\r\n\r\n// first we need to create a function, which contains hook itself, url is the parameter\r\nconst useFetch = (url) => {  // custom hook must starts its name with use, \r\n    const [data, setData] = useState(null);\r\n    const [isPending,setIsPending] = useState(true);\r\n    const [error,setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            fetch('http://localhost:8000/blogs')\r\n            .then(res => {   // we get response object\r\n                if (!res.ok){\r\n                    throw Error('could not fetch data for that resource');\r\n                }\r\n                return res.json();  // use the json method on that object \r\n            })\r\n            .then(data => {   // this data is just a local variable, not same as useState data\r\n                console.log(data);\r\n                setData(data);\r\n                setIsPending(false);\r\n                setError(null);\r\n            })\r\n            .catch(err => {\r\n                setError(err.message);\r\n                setIsPending(false);\r\n            })\r\n        },1000);\r\n    }, [url]);  // we place url as dependency, which means, whenever url changes,  useEffect will rerun to get data for that url\r\n\r\n\r\n    return {data,isPending,error};\r\n}\r\n\r\nexport default useFetch;"],"mappings":";AAEA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;;AAE1C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EAAG;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,SAAS,EAACC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC/C,MAAM,CAACQ,KAAK,EAACC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEvCC,SAAS,CAAC,MAAM;IACZS,UAAU,CAAC,MAAM;MACbC,KAAK,CAAC,6BAA6B,CAAC,CACnCC,IAAI,CAACC,GAAG,IAAI;QAAI;QACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAC;UACR,MAAMC,KAAK,CAAC,wCAAwC,CAAC;QACzD;QACA,OAAOF,GAAG,CAACG,IAAI,EAAE,CAAC,CAAE;MACxB,CAAC,CAAC,CACDJ,IAAI,CAACR,IAAI,IAAI;QAAI;QACda,OAAO,CAACC,GAAG,CAACd,IAAI,CAAC;QACjBC,OAAO,CAACD,IAAI,CAAC;QACbG,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC,CAAC,CACDU,KAAK,CAACC,GAAG,IAAI;QACVX,QAAQ,CAACW,GAAG,CAACC,OAAO,CAAC;QACrBd,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC;IACN,CAAC,EAAC,IAAI,CAAC;EACX,CAAC,EAAE,CAACJ,GAAG,CAAC,CAAC,CAAC,CAAE;;EAGZ,OAAO;IAACC,IAAI;IAACE,SAAS;IAACE;EAAK,CAAC;AACjC,CAAC;AAAA,GA7BKN,QAAQ;AA+Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}